step 1: get total quantity for each item on each weekday
step 2: pivot table
step 3: use aggregation function to return only one record for each category

SELECT
    item_category AS 'Category',
    SUM(IF(day = 'Monday', quantity, 0)) AS 'Monday',
    SUM(IF(day = 'Tuesday', quantity, 0)) AS 'Tuesday',
    SUM(IF(day = 'Wednesday', quantity, 0)) AS 'Wednesday',
    SUM(IF(day = 'Thursday', quantity, 0)) AS 'Thursday',
    SUM(IF(day = 'Friday', quantity, 0)) AS 'Friday',
    SUM(IF(day = 'Saturday', quantity, 0)) AS 'Saturday',
    SUM(IF(day = 'Sunday', quantity, 0)) AS 'Sunday'
FROM Items i LEFT JOIN
(SELECT
    item_id,
    DAYNAME(order_date) AS day,
    SUM(quantity) AS quantity
FROM Orders
GROUP BY 1, 2) a ON i.item_id = a.item_id
GROUP BY 1
ORDER BY 1

Table: Orders

+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| order_id      | int     |
| customer_id   | int     |
| order_date    | date    | 
| item_id       | varchar |
| quantity      | int     |
+---------------+---------+
(ordered_id, item_id) is the primary key for this table.
This table contains information of the orders placed.
order_date is the date when item_id was ordered by the customer with id customer_id.
 

Table: Items

+---------------------+---------+
| Column Name         | Type    |
+---------------------+---------+
| item_id             | varchar |
| item_name           | varchar |
| item_category       | varchar |
+---------------------+---------+
item_id is the primary key for this table.
item_name is the name of the item.
item_category is the category of the item.
 

You are the business owner and would like to obtain a sales report for category items and day of the week.

Write an SQL query to report how many units in each category have been ordered on each day of the week.

Return the result table ordered by category.



来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/sales-by-day-of-the-week
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
