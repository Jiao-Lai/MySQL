Solution:

    step 1: join tables users and movie_rating, count rating activity for each user, use order by and limit 1 to select result.
    step 2: join tables movie and movie_rating, count average rating for each movie, use order by and limit 1 to select result.
    step 3: union


(select
    u.name as results
    from Users u join Movie_Rating m on u.user_id = m.user_id 
    group by u.name 
    order by count(distinct movie_id) desc, u.name 
    limit 1)
union all
(select
    title as results
    from Movies m1 join Movie_Rating m2 on m1.movie_id = m2.movie_id 
    where left(created_at, 7) = '2020-02'
    group by title
    order by avg(rating) desc, title
    limit 1)
    
表：Movies

+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| movie_id      | int     |
| title         | varchar |
+---------------+---------+
movie_id 是这个表的主键。
title 是电影的名字。
表：Users

+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| user_id       | int     |
| name          | varchar |
+---------------+---------+
user_id 是表的主键。
表：Movie_Rating

+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| movie_id      | int     |
| user_id       | int     |
| rating        | int     |
| created_at    | date    |
+---------------+---------+
(movie_id, user_id) 是这个表的主键。
这个表包含用户在其评论中对电影的评分 rating 。
created_at 是用户的点评日期。 
 

请你编写一组 SQL 查询：

查找评论电影数量最多的用户名。
如果出现平局，返回字典序较小的用户名。

查找在 2020 年 2 月 平均评分最高 的电影名称。
如果出现平局，返回字典序较小的电影名称。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/movie-rating
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
