step 1: create table month containing 1 to 12 consecutively
step 2: get month info for each registered record in 2020 and before 2020, if registered before 2020, assign month as 1
step 3: month left join table from step 2, Rides, AcceptedRides to get available drivers and number of drivers accepted rides in each month 
step 4: use window function to calculate cumulative number of drivers by each month, and the working percentage
note: available drivers could be 0, this will generate null working percentage

with recursive month as (
    select 1 as month union all select month + 1 as month from month where month < 12
)
select
    month,
    ifnull(round(100*active_drivers/sum(avail_drivers) over(order by month),2),0) as working_percentage  
from
(select
    m.month,
    count(distinct a.driver_id) as avail_drivers,
    count(distinct ar.driver_id) as active_drivers
from month m left join
(select
    driver_id,
    case when year(join_date) < 2020 then 1
         else month(join_date) 
    end as month
from Drivers 
where year(join_date) <= 2020) a on m.month = a.month
left join Rides r on m.month = month(requested_at) and year(requested_at) = 2020
left join AcceptedRides ar on r.ride_id = ar.ride_id
group by 1) a

library(dplyr)
library(tidyr)
library(lubridate)
month <- data.frame(month = seq(1:12))
drivers <- data.frame(driver_id = c(10, 8, 5, 7, 4, 1, 6),
                      join_date = c('2019-12-10', '2020-1-13', '2020-2-16', '2020-3-8', '2020-5-17', '2020-10-24', '2021-1-5')
)
rides <- data.frame(ride_id = c(6, 1, 10, 19, 3, 13, 7, 17, 20, 5, 2, 11, 15, 12, 14),
                    requested_at = c('2019-12-9', '2020-2-9', '2020-3-4', '2020-4-6', '2020-6-3', '2020-6-22',
                                     '2020-7-16', '2020-8-25', '2020-11-2', '2020-11-9', '2020-12-9', '2021-1-11',
                                     '2021-1-17', '2021-1-19', '2021-1-27')
)
AcceptedRides <- data.frame(ride_id = c(10, 12, 7, 17, 20, 5, 2 , 11, 15, 12, 14),
                            driver_id = c(10, 10, 8, 7, 1, 7, 4, 8, 8, 8, 1)
                            
)
active_driver <- drivers %>% mutate(join_date = as.Date(join_date)) %>%
  filter(year(join_date) <= 2020) %>%
  mutate(month = ifelse(year(join_date) == 2020, month(join_date), 1)) %>%
  group_by(month) %>%
  summarize(active_driver = n_distinct(driver_id)) %>%
  right_join(month, by = 'month') %>%
  replace_na(list(active_driver = 0))
rides %>% mutate(requested_at = as.Date(requested_at)) %>%
  filter(year(requested_at) == 2020) %>%
  mutate(month = month(requested_at)) %>%
  inner_join(AcceptedRides, by = 'ride_id') %>%
  group_by(month) %>%
  summarize(n_driver = n_distinct(driver_id)) %>%
  right_join(month, by = 'month') %>%
  left_join(active_driver, by = 'month') %>%
  replace_na(list(n_driver = 0)) %>%
  mutate(driver = cumsum(active_driver),
         working_percentage = ifelse(driver != 0, 100*n_driver/driver, 0) ) %>%
  select(month, working_percentage)



Table: Drivers

+-------------+---------+
| Column Name | Type    |
+-------------+---------+
| driver_id   | int     |
| join_date   | date    |
+-------------+---------+
driver_id is the primary key for this table.
Each row of this table contains the driver's ID and the date they joined the Hopper company.
 

Table: Rides

+--------------+---------+
| Column Name  | Type    |
+--------------+---------+
| ride_id      | int     |
| user_id      | int     |
| requested_at | date    |
+--------------+---------+
ride_id is the primary key for this table.
Each row of this table contains the ID of a ride, the user's ID that requested it, and the day they requested it.
There may be some ride requests in this table that were not accepted.
 

Table: AcceptedRides

+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| ride_id       | int     |
| driver_id     | int     |
| ride_distance | int     |
| ride_duration | int     |
+---------------+---------+
ride_id is the primary key for this table.
Each row of this table contains some information about an accepted ride.
It is guaranteed that each accepted ride exists in the Rides table.
 

Write an SQL query to report the percentage of working drivers (working_percentage) for each month of 2020

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/hopper-company-queries-ii
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
