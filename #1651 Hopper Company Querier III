step 1: create a column containing month 1 - 12
step 2: query summation of ride_distance and ride_duration for each month in 2020
step 3: left join month table and table from step 2
step 4: use rolling window to calculate avg(ride_distance) and avg(duration) from current month to 2 months following
step 5: select where month <= 10


WITH RECURSIVE month AS (
    SELECT 1 AS month UNION ALL SELECT month + 1 AS MONTH FROM MONTH WHERE MONTH < 12
)
SELECT
    *
FROM
(SELECT
    month,
    ROUND(AVG(ride_distance) OVER(ORDER BY month ROWS BETWEEN 0 PRECEDING AND 2 FOLLOWING),2) AS average_ride_distance,
    ROUND(AVG(ride_duration) OVER(ORDER BY month ROWS BETWEEN 0 PRECEDING AND 2 FOLLOWING),2) AS average_ride_duration
FROM
(SELECT
    month.month,
    IFNULL(ride_distance, 0) AS ride_distance,
    IFNULL(ride_duration, 0) AS ride_duration 
FROM month LEFT JOIN
(SELECT
    MONTH(requested_at) AS Month ,
    SUM(ride_distance) AS ride_distance,
    SUM(ride_duration) AS ride_duration
FROM AcceptedRides a JOIN Rides r ON a.ride_id = r.ride_id
WHERE YEAR(requested_at) = 2020
GROUP BY 1) a ON month.month = a.month) b) c WHERE month <= 10

Table: Drivers

+-------------+---------+
| Column Name | Type    |
+-------------+---------+
| driver_id   | int     |
| join_date   | date    |
+-------------+---------+
driver_id is the primary key for this table.
Each row of this table contains the driver's ID and the date they joined the Hopper company.
 

Table: Rides

+--------------+---------+
| Column Name  | Type    |
+--------------+---------+
| ride_id      | int     |
| user_id      | int     |
| requested_at | date    |
+--------------+---------+
ride_id is the primary key for this table.
Each row of this table contains the ID of a ride, the user's ID that requested it, and the day they requested it.
There may be some ride requests in this table that were not accepted.
 

Table: AcceptedRides

+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| ride_id       | int     |
| driver_id     | int     |
| ride_distance | int     |
| ride_duration | int     |
+---------------+---------+
ride_id is the primary key for this table.
Each row of this table contains some information about an accepted ride.
It is guaranteed that each accepted ride exists in the Rides table.
 

Write an SQL query to compute the average_ride_distance and average_ride_duration of every 3-month window starting from January - March 2020 to October - December 2020. Round average_ride_distance and average_ride_duration to the nearest two decimal places.

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/hopper-company-queries-iii
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
